数组的长度：int[] nums.length;
String长度：s.length();
其他的的都是.size()

StringBuilder res = new StringBuilder();         //对string操作多的情况用StringBuilder
res.append(value);
return res.reverse().toString();

List<List<Integer>> res = new ArrayList<>();
private void subsets(int[] nums, int startindex, LinkedList<Integer> buffer)
res.add(new ArrayList<Integer>(buffer));
buffer.removeLast();    //只有LinkedList才有这个方法
buffer.getLast();
buffer.size();
subsets(nums, 0 , new ArrayList<>());
LinkList是一个双链表,在添加和删除元素时具有比ArrayList更好的性能.但在get与set方面弱于ArrayList.
Arrays.sort(nums);
int [] inorder = Arrays.copyOf(preorder, preorder.length);
element.get(k-1);返回前k个元素

sum = (sum << 1) | root.val;       //二进制位相加

二叉树递归操作：
pathsList.add(new ArrayList<>(pathNodes)); //当要把一个满足条件的List插入到最终结果中时，要新建
pathNodes.remove(pathNodes.size() - 1);   //二叉树递归中List对象是不会重新复制一个再入栈的，入栈的一直是本身，所以需要手动更新

path += Integer.toString(root.val);
count.put(n, count.getOrDefault(n, 0) + 1);   //用于计算个数
hashMap.remove(key);
count.put(n, count.getOrDefault(n, 0) + 1);

output.add(new ArrayList<>(perm));     //向二维list中添加一维list

总结List常用的方法:增(add(Object ele))、删(remove(int index))、改(set(int index, Object ele))、查(get(int index))、插(add(int index,Object ele))、长度(size()).

Queue<ListNode> q = new PriorityQueue<>((n1, n2) -> n1.val - n2.val); //最小堆
if(l!=null){                 //不为空的时候才能将其插入堆
q.add()
q.peek()
q.poll()
Map<Integer, Integer> count = new HashMap();


Queue<Integer> heap = new PriorityQueue<>((n1, n2) -> count.get(n1) - count.get(n2));

Queue<TreeNode> queue = new LinkedList<TreeNode>();  //普通队列就用LinkedList实现

//最小堆另一种写法
PriorityQueue<Integer> allocator =
        new PriorityQueue<Integer>(
            intervals.length,
            new Comparator<Integer>() {
              public int compare(Integer a, Integer b) {
                return a - b;
              }
            });
	    
Queue<TreeNode> queue = new LinkedList<TreeNode>();  //使用LinkedList作为队列
queue.size()
queue.remove()      //queue的话默认弹出最后一个元素，但如果是List则没有不带参数的remove
queue.peek()
queue.poll()
queue.add()
!queue.isEmpty()

pathNodes.remove(pathNodes.size() - 1);List删除元素必须要带索引参数

Stack<TreeNode> stack = new Stack<>();         //栈

public class ListNode{//练习写自己需要的数据结构
        int val;
        ListNode next;
        ListNode() {};
        ListNode(int val){
            this.val = val;
        }
        ListNode(int val, ListNode next){
            this.val = val;
            this.next = next;
        }
    }

s.charAt(i)

int lowestindex = Collections.min(map.values()); //获取map中最小的value
Map<Character, Integer> map = new HashMap<>(); //HashMap中存的是每一个字符和本字符在字符串中的最右端的索引
List<String> wordDict
Set<String> wordDictSet = new HashSet<>(wordDict);   //用List初始化set
wordDictSet.contains(s.substring(j, i)))    //[j,i)


private Map<String, List<Pair<Integer, String>>> M = new HashMap();
if(!M.containsKey(key))
            M.put(key, new ArrayList<Pair<Integer, String>>());
M.get(key).add(new pair(timestamp, value));
List<Pair<Integer, String>> A = M.get(key);
A.get(i).getValue();       //ArrayList通过下标访问

class Solution {
    public int[][] merge(int[][] intervals) {
        Arrays.sort(intervals, (a, b) -> Integer.compare(a[0], b[0])); //二位数组，根据特定条件排序
        LinkedList<int[]> merged = new LinkedList<>();
        
        for(int[] interval : intervals){             //二维数组遍历
            if(merged.isEmpty() || merged.getLast()[1] < interval[0]){   //判断数组是否为空，得到数组最后一个元素
                merged.add(interval);
            }
            else{
                merged.getLast()[1] = Math.max(merged.getLast()[1], interval[1]); //更新数组元素
            }
        }
        return merged.toArray(new int[merged.size()][]);     //将List转为二维数组
    }
}

Arrays.sort(intervals, (a, b) -> Integer.compare(a[0], b[0]));

Stack<Character> stack = new Stack<>();
while (!stack.isEmpty() && Character.isDigit(stack.peek())) {  //判断char是否是数字
                    k = k + (stack.pop() - '0') * base;    //char转数字                int m = Integer.parseInt(String.valueOf(stack.pop()));
char[] result = new char[stack.size()];         //stack复制到数组中
        for(int i = result.length-1 ; i>=0 ; i--)
            result[i] = stack.pop();
        
return new String(result);     //char数组转string

return new int[] {i, map.get(complement)};

Queue<Integer> queue = new LinkedList<>();
int s = queue.remove();

// At least one of l1 and l2 can still have nodes at this point, so connect
// the non-null list to the end of the merged list.
prev.next = l1 == null ? l2 : l1;      //用在某一个数组链表为空时merge的操作，将剩余的全连上

    while (p != null || q != null) {      //最好不用“或”连接“null”
        int x = (p != null) ? p.val : 0;
        int y = (q != null) ? q.val : 0;
        int sum = carry + x + y;
        carry = sum / 10;
        curr.next = new ListNode(sum % 10);
        curr = curr.next;
        if (p != null) p = p.next;
        if (q != null) q = q.next;
    }

char到int可以隐式转换，int到char需要显式强制转换

string转为char数组：
for (char c: ("" + (read - anchor + 1)).toCharArray()) {
char数组转为string：
String key = String.valueOf(ca);

取数组的一部分：
chars = Arrays.copyOfRange(chars, 0, pos);

int nr = grid.length;      //二维数组行数
int nc = grid[0].length;   //二维数组列数

如果放弃狭义递归函数的话，我们不得不借助一个额外的数据结构：栈。
如此看来，无论如何都要用到栈，只不过要么让编译器来维护一个栈（函数栈），要么让程序狗来维护一个栈（数据栈）。
可以把递归看成是自己调用另一个和自己功能一样，但是函数名不同的函数来理解
遍历的话不要用递归（深度优先遍历），要用广度优先遍历


实际上就是一个决策树的遍历过程：https://www.zhihu.com/topic/20745319/top-answers
1、路径：也就是已经做出的选择。
2、选择列表：也就是你当前可以做的选择。
3、结束条件：也就是到达决策树底层，无法再做选择的条件。
回溯算法就是个多叉树的遍历问题，关键就是在前序遍历和后序遍历的位置做一些操作
result = []
def backtrack(路径, 选择列表):
    if 满足结束条件:
        result.add(路径)
        return
    for 选择 in 选择列表:
        # 做选择
        将该选择从选择列表移除
        路径.add(选择)
        backtrack(路径, 选择列表)
        # 撤销选择
        路径.remove(选择)
        将该选择再加入选择列表
        
其核心就是 for 循环里面的递归，在递归调用之前「做选择」，在递归调用之后「撤销选择」

动态规划：
第一步要明确两点，「状态」和「选择」。
先说状态，如何才能描述一个问题局面？只要给定几个可选物品和一个背包的容量限制，就形成了一个背包问题，对不对？所以状态有两个，就是「背包的容量」和「可选择的物品」。
再说选择，也很容易想到啊，对于每件物品，你能选择什么？选择就是「装进背包」或者「不装进背包」嘛。

# 初始化 base case
dp[0][0][...] = base
# 进行状态转移
for 状态1 in 状态1的所有取值：
    for 状态2 in 状态2的所有取值：
        for ...
            dp[状态1][状态2][...] = 择优(选择1，选择2...)

dp数组是什么？其实就是描述问题局面的一个数组。换句话说，我们刚才明确问题有什么「状态」，现在需要用dp数组把状态表示出来。
首先看看刚才找到的「状态」，有两个，也就是说我们需要一个二维dp数组，一维表示可选择的物品，一维表示背包的容量。
dp[i][j] 的定义如下：若只使用前 i 个物品，当背包容量为 j 时，有 dp[i][j] 种方法可以装满背包。

Queue < Integer > queue = new LinkedList < > ();

动态规划：//因为要看dp[i+1][j-1], 所以i从后往前遍历，j从前往后；而且要单独处理两个元素的情况

A sliding window would only work if all values were positive. 
Now if the questions were to find a non-continuous subarray, 
then we could have sorted the array and used a sliding window technique which would have worked even with negative values 
as the sum would be always increasing and we won't get unpredictable sum.

快排最好情况：O(nlogn)，最坏情况：O(n2):正排有序或者倒排有序或者元素全都一样

Quickselect is a textbook algorthm typically used to solve the problems "find kth something"

写代码的时候加注释

两个线程交替打印1-100:
https://blog.csdn.net/woainiwss/article/details/52013810?utm_medium=distribute.pc_relevant.none-task-blog-2%7Edefault%7EBlogCommendFromMachineLearnPai2%7Edefault-14.control&dist_request_id=&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2%7Edefault%7EBlogCommendFromMachineLearnPai2%7Edefault-14.control
https://blog.csdn.net/tanzhen1991910/article/details/53065275?utm_medium=distribute.pc_relevant.none-task-blog-2%7Edefault%7EBlogCommendFromBaidu%7Edefault-9.control&dist_request_id=&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2%7Edefault%7EBlogCommendFromBaidu%7Edefault-9.control
https://blog.csdn.net/a159357445566/article/details/108604317?utm_medium=distribute.pc_relevant.none-task-blog-2%7Edefault%7EBlogCommendFromMachineLearnPai2%7Edefault-1.control&dist_request_id=&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2%7Edefault%7EBlogCommendFromMachineLearnPai2%7Edefault-1.control
Thread+synchronized， Thread+ReentrantLock，Runnable+synchronized：
public class PrintNumber implements Runnable {
    private static int cnt = 0;
    @Override
    public void run() {
        while (cnt <= 100) {
            synchronized (this) {
                cnt++;
                System.out.println(Thread.currentThread().getName()+ ':' + cnt);
                this.notify();
                try {
                    this.wait();
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }
            }
        }
    }
    public static void main(String[] args) {
		PrintNumber p = new PrintNumber();
        Thread thread0 = new Thread(p);
        Thread thread1 = new Thread(p);
		thread0.setName("线程1");
		thread1.setName("线程2");
        thread0.start();
        thread1.start();
    }
}

生产者消费者：
https://blog.csdn.net/u010297957/article/details/51346074

快速排序：
public class Solution {
    public void quicksort(int[] arr, int l, int r){
        if( r - l <= 15 ){
            InsertionSort.sort(arr, l, r);
            return;
        }
        swap( arr, l, (int)(Math.random()*(r-l+1)) + l );
        int v = arr[l];
        int lt = l;
        int gt = r + 1;
        int i = l + 1;
        while(i < gt){
            if(arr[i] < v){
                swap(arr, lt+1, i);
                lt++;
                i++;
            }
            else if(arr[i] > v){
                swap(arr, i, gt-1);
                gt--;
            }
            else
                i++;
        }
        swap(arr, l, lt);   
        quicksort(arr, l, lt-1);
        quicksort(arr, lt+1, r);
    }
    private void swap(int[] arr, int i, int j){
        int temp = arr[i];
        arr[i] = arr[j];
        arr[j] = temp;
    }
}

堆排序：
public class HeapSort {
    public static void main(String []args){
        int []arr = {7,6,7,11,5,12,3,0,1};
        System.out.println("排序前："+Arrays.toString(arr));
        sort(arr);
        System.out.println("排序前："+Arrays.toString(arr));
    }
 
    public static void sort(int []arr){
        //1.构建大顶堆
        for(int i=arr.length/2-1;i>=0;i--){
            //从第一个非叶子结点从下至上，从右至左调整结构
            adjustHeap(arr,i,arr.length);
        }
        //2.调整堆结构+交换堆顶元素与末尾元素
        for(int j=arr.length-1;j>0;j--){
            swap(arr,0,j);//将堆顶元素与末尾元素进行交换
            adjustHeap(arr,0,j);//重新对堆进行调整
        }
    }
 
    /**
     * 调整大顶堆（仅是调整过程，建立在大顶堆已构建的基础上）
     * @param arr
     * @param i
     * @param length
     */
    public static void adjustHeap(int []arr,int i,int length){
        int temp = arr[i];//先取出当前元素i
        for(int k=i*2+1;k<length;k=k*2+1){//从i结点的左子结点开始，也就是2i+1处开始
            if(k+1<length && arr[k]<arr[k+1]){//如果左子结点小于右子结点，k指向右子结点
                k++;
            }
            if(arr[k] >temp){//如果子节点大于父节点，将子节点值赋给父节点（不用进行交换）
                arr[i] = arr[k];
                i = k;
            }else{
                break;
            }
        }
        arr[i] = temp;//将temp值放到最终的位置
    }
    /**
     * 交换元素
     * @param arr
     * @param a
     * @param b
     */
    public static void swap(int []arr,int a ,int b){
        int temp=arr[a];
        arr[a] = arr[b];
        arr[b] = temp;
    }
}

单例模式：
懒汉式写法（线程安全）
public class Singleton {  
   private static Singleton instance;  
   private Singleton (){}  
   public static synchronized Singleton getInstance() {  
   if (instance == null) {  
       instance = new Singleton();  
   }  
   return instance;  
   }  
}

饿汉式写法
public class Singleton {  
   private static Singleton instance = new Singleton();  
   private Singleton (){}  
   public static Singleton getInstance() {  
   return instance;  
   }  
}

静态内部类
public class Singleton {  
   private static class SingletonHolder {  
   private static final Singleton INSTANCE = new Singleton();  
   }  
   private Singleton (){}  
   public static final Singleton getInstance() {  
   return SingletonHolder.INSTANCE;  
   }  
}

