总时延 = 排队时延 + 处理时延 + 传输时延 + 传播时延

应用层 ：为特定应用程序提供数据传输服务:HTTP、DNS 等协议。数据单位为报文。
传输层 ：为进程提供通用数据传输服务:TCP，UDP，数据单位为用户数据报。
网络层 ：为主机提供数据传输服务。封装成分组。
数据链路层 ：主机之间可以有很多链路，链路层协议就是为同一链路的主机提供数据传输服务。分组封装成帧。
物理层 ：传输数据比特流。

OSI:
表示层 ：数据压缩、加密以及数据描述，这使得应用程序不必关心在各台主机中数据内部格式不同的问题。
会话层 ：建立及管理会话。
五层协议没有表示层和会话层，而是将这些功能留给应用程序开发者处理。

TCP/IP:
只有四层，相当于五层协议中数据链路层和物理层合并为网络接口层。

路由器:
只有下面三层协议，因为路由器位于网络核心中，不需要为进程或者应用程序提供服务，因此也就不需要传输层和应用层。

物理层通信方式：
单工通信：单向传输
半双工通信：双向交替传输
全双工通信：双向同时传输

数据链路层：
透明传输：帧的数据部分含有和首部尾部相同的内容，那么帧的开始和结束位置就会被错误的判定。在数据部分添加转义字符，接收的时候再去掉转义字符。
差错检测：CRC校验：一个CRC码一定能被生成多项式整除，所以在接收方对码字用同样的生成多项式相除，如果余数为0，则码字没有错误；若余数不为0，则说明某位出错，不同的出错位置余数不同。

广播信道：
所有的节点都在同一个广播信道上发送数据，因此需要有避免发生冲突。
信道复用技术：频分复用、时分复用、波分复用和码分复用               ？？？看450的ppt看为啥信道复用不好
在通信的过程中主机会一直占用一部分信道资源。但是由于计算机数据的突发性质，通信过程没必要一直占用信道资源而不让出给其它用户使用，因此这两种方式对信道的利用率都不高。

CSMA/CD 协议：                                              ？？？看 450如何检测碰撞以及如何恢复
多点接入 ：说明这是总线型网络，许多主机以多点的方式连接到总线上。
载波监听 ：每个主机都必须不停地监听信道。在发送前，如果监听到信道正在使用，就必须等待。
碰撞检测 ：在发送中，如果监听到信道已有其它主机正在发送数据，就表示发生了碰撞。虽然每个主机在发送数据之前都已经监听到信道为空闲，但是由于电磁波的传播时延的存在，还是有可能会发生碰撞。

PPP协议？？？

MAC 地址是链路层地址，长度为 6 字节（48 位），用于唯一标识网络适配器（网卡）。自己的身份证号，出厂时刻在设备上的。
一台主机拥有多少个网络适配器就有多少个 MAC 地址。例如笔记本电脑普遍存在无线网络适配器和有线网络适配器，因此就有两个 MAC 地址。

switch：交换机具有自学习能力，学习的是交换表的内容，交换表中存储着 MAC 地址到接口的映射。正是由于这种自学习能力，因此交换机是一种即插即用设备，不需要网络管理员手动配置交换表内容。

网络层：
IP层的传输和子网掩码？？？

在通信过程中，IP 数据报的源地址和目的地址始终不变，而 MAC 地址随着链路的改变而改变。ARP（地址解析协议） 实现由 IP 地址得到 MAC 地址。
每个主机都有一个 ARP 高速缓存，里面有本局域网上的各主机和路由器的 IP 地址到 MAC 地址的映射表。（为何通过目的IP地址就能获得每个链路的MAC地址？？？）

看450，内部子网与外部通信？？？

看450，路由器分组转发流程？？？

传输层：
用户数据报协议 UDP（User Datagram Protocol）是无连接的，尽最大可能交付，没有拥塞控制，面向报文（对于应用程序传下来的报文不合并也不拆分，只是添加 UDP 首部），支持一对一、一对多、多对一和多对多的交互通信。
传输控制协议 TCP（Transmission Control Protocol）是面向连接的，提供可靠交付，有流量控制，拥塞控制，提供全双工通信，面向字节流（把应用层传下来的报文看成字节流，把字节流组织成大小不等的数据块），每一条 TCP 连接只能是点对点的（一对一）。

三次握手：
首先 B 处于 LISTEN（监听）状态，等待客户的连接请求。
A 向 B 发送连接请求报文，SYN=1，ACK=0，选择一个初始的序号 x。
B 收到连接请求报文，如果同意建立连接，则向 A 发送连接确认报文，SYN=1，ACK=1，确认号为 x+1，同时也选择一个初始的序号 y。
A 收到 B 的连接确认报文后，还要向 B 发出确认，确认号为 y+1，序号为 x+1。
B 收到 A 的确认后，连接建立。
第三次握手是为了防止失效的连接请求到达服务器，让服务器错误打开连接。

四次挥手：
A 发送连接释放报文，FIN=1。
B 收到之后发出确认，此时 TCP 属于半关闭状态，B 能向 A 发送数据但是 A 不能向 B 发送数据。
B 不再需要连接时，发送连接释放报文，FIN=1。这个时候B已经把需要发送的已经发送完了
A 收到后发出确认，进入 TIME-WAIT 状态，等待 2 MSL（最大报文存活时间）后释放连接。 A之所以还要再等一等是因为可能因为堵塞，数据还在通道中。
B 收到 A 的确认后释放连接。

TCP 使用超时重传来实现可靠传输：如果一个已经发送的报文段在超时时间内没有收到确认，那么就重传这个报文段。
滑动窗口：窗口是缓存的一部分，用来暂时存放字节流。发送方和接收方各有一个窗口，接收方通过 TCP 报文段中的窗口字段告诉发送方自己的窗口大小，发送方根据这个值和其它信息设置自己的窗口大小。

EE450 flow control ？？？
EE450 拥塞控制？？？

应用层：
DNS 是一个分布式数据库，提供了主机名和 IP 地址之间相互转换的服务。DNS 可以使用 UDP 或者 TCP 进行传输，使用的端口号都为 53。在两种情况下会使用 TCP 进行传输：
如果返回的响应超过的 512 字节（UDP 最大只支持 512 字节的数据）。区域传送（区域传送是主域名服务器向辅助域名服务器传送变化的那部分数据）。

文件传送协议（FTP）使用 TCP 进行连接，它需要两个连接来传送一个文件：
控制连接：服务器打开端口号 21 等待客户端的连接，客户端主动建立连接后，使用这个连接将客户端的命令传送给服务器，并传回服务器的应答。
数据连接：用来传送一个文件数据。
根据数据连接是否是服务器端主动建立，FTP 有主动和被动两种模式：
主动模式：服务器端主动建立数据连接，其中服务器端的端口号为 20，客户端的端口号随机，但是必须大于 1024，因为 0~1023 是熟知端口号。
被动模式：客户端主动建立数据连接，其中客户端的端口号由客户端自己指定，服务器端的端口号随机。

DHCP (Dynamic Host Configuration Protocol) 使用户不再需要手动配置 IP 地址等信息：
1.客户端发送 Discover 报文，该报文的目的地址为 255.255.255.255:67，源地址为 0.0.0.0:68，被放入 UDP 中，该报文被广播到同一个子网的所有主机上。如果客户端和 DHCP 服务器不在同一个子网，就需要使用中继代理。
2.DHCP 服务器收到 Discover 报文之后，发送 Offer 报文给客户端，该报文包含了客户端所需要的信息。因为客户端可能收到多个 DHCP 服务器提供的信息，因此客户端需要进行选择。
3.如果客户端选择了某个 DHCP 服务器提供的信息，那么就发送 Request 报文给该 DHCP 服务器。
4.DHCP 服务器发送 Ack 报文，表示客户端此时可以使用提供给它的信息。

Web页面请求过程：
1.通过DHCP配置主机IP地址
2.为了得到HTTP服务器的IP地址，需要通过DNS服务器进行域名解析；又因为DNS服务器的不在本网络内，所以需要通过路由器进行转发；为了将“域名解析”请求发送给路由器使其帮助转发，就需要路由器的MAC地址；
利用ARP进行全局广播，得到路由器MAC地址。DNS服务器收到UDP的“域名解析”请求，返回HTTP服务器的IP地址。
有了HTTP服务器的IP地址就能生成TCP套接字，（数据链路层：利用子网掩码判断是否在同一个网络下，若不在则把本网络的路由器的MAC地址返回（ARP））
在进行TCP传输之前，先进行三次握手，发送TCP SYN给服务器，服务器返回TCP SYN Ack，然后发送TCP GET给服务器


HTTP：
HTTP 使用 URL（ U niform Resource Locator，统一资源定位符）来定位资源，它是 URI（Uniform Resource Identifier，统一资源标识符）的子集，URL 在 URI 的基础上增加了定位能力。

GET：获取资源

HEAD：获取报文首部。和GET方法类似，但是不返回报文实体主体部分。主要用于确认 URL 的有效性以及资源更新的日期时间等。

POST：传输实体主体。POST主要用来传输数据，而GET主要用来获取资源。

PUT：上传文件，由于自身不带验证机制，任何人都可以上传文件，因此存在安全性问题，一般不使用该方法。

PATCH：对资源进行部分修改。PUT也可以用于修改资源，但是只能完全替代原始资源，PATCH 允许部分修改。

DELETE：删除文件。与PUT功能相反，并且同样不带验证机制。

OPTIONS：查询支持的方法。查询指定的 URL 能够支持的方法。会返回 Allow: GET, POST, HEAD, OPTIONS 这样的内容。

状态码	           类别	                 含义
1XX	Informational（信息性状态码）	    接收的请求正在处理
2XX	Success（成功状态码）	          请求正常处理完毕
3XX	Redirection（重定向状态码）	      需要进行附加操作以完成请求
4XX	Client Error（客户端错误状态码）	服务器无法处理请求
5XX	Server Error（服务器错误状态码）	服务器处理请求出错

GET 和 POST 的请求都能使用额外的参数，但是 GET 的参数是以查询字符串出现在 URL 中，而 POST 的参数存储在实体主体中。
安全的 HTTP 方法不会改变服务器状态，也就是说它只是可读的。
安全的方法除了 GET 之外还有：HEAD、OPTIONS。
不安全的方法除了 POST 之外还有 PUT、DELETE。

GET，HEAD，PUT 和 DELETE 等方法都是幂等的，而 POST 方法不是。

PUT和POST的区别：
这俩个方法初看一下好像都是更新资源，但是有本质上的区别，那就是语义。在HTTP中，PUT被定义为幂等（idempotent）的方法，POST则不是，这是一个很重要的区别。
首先解释幂等，幂等是数学的一个用语，对于单个输入或者无输入的运算方法，如果每次都是同样的结果，则称其是幂等的。也就是说，如果一个网络重复执行多次，产生的效果是一样的，那就是幂等（idempotent）。
POST
用于提交请求，可以更新或者创建资源，是非幂等的，举个例子： 
在用户注册功能上，每次提交都是创建一个用户账号，这个时候就用POST。
PUT
用于向指定URL传送更新资源，是幂等的。 
还是用户模块，比如修改用户密码，虽然提交的还是账户名跟用户密码这个俩个必填参数，但是每次提交都只是更新该用户密码,每次请求都只是覆盖原先的值。此时就该用PUT。 

Cookie：
会话期 Cookie：浏览器关闭之后它会被自动删除，也就是说它仅在会话期内有效。
持久性 Cookie：指定过期时间（Expires）或有效期（max-age）之后就成为了持久性的 Cookie。

cookie和session的区别；
两者最大的区别在于生存周期，一个是IE启动到IE关闭.(浏览器页面一关 ,session就消失了)，一个是预先设置的生存周期，或永久的保存于本地的文件。(cookie)
Session信息是存放在server端，但session id是存放在client cookie的；Cookie是完全保持在客户端的如：IE firefox 当客户端禁止cookie时将不能再使用

缓存          ？？？
1. 优点
缓解服务器压力；
降低客户端获取资源的延迟：缓存通常位于内存中，读取缓存的速度更快。并且缓存服务器在地理位置上也有可能比源服务器来得近，例如浏览器缓存。
2. 实现方法
让代理服务器进行缓存；
让客户端浏览器进行缓存。


HTTPS：
HTTP 有以下安全性问题：
使用明文进行通信，内容可能会被窃听；
不验证通信方的身份，通信方的身份有可能遭遇伪装；
无法证明报文的完整性，报文有可能遭篡改。
HTTPS 并不是新协议，而是让 HTTP 先和 SSL（Secure Sockets Layer）通信，再由 SSL 和 TCP 通信，也就是说 HTTPS 使用了隧道进行通信。

加密
1. 对称密钥加密
对称密钥加密（Symmetric-Key Encryption），加密和解密使用同一密钥。
优点：运算速度快；
缺点：无法安全地将密钥传输给通信方。
2.非对称密钥加密
非对称密钥加密，又称公开密钥加密（Public-Key Encryption），加密和解密使用不同的密钥。
公开密钥所有人都可以获得，通信发送方获得接收方的公开密钥之后，就可以使用公开密钥进行加密，接收方收到通信内容后使用私有密钥解密。
优点：可以更安全地将公开密钥传输给通信发送方；
缺点：运算速度慢。

HTTPS 采用混合的加密机制，正是利用了上面提到的方案：
使用非对称密钥加密方式，传输对称密钥加密方式所需要的 Secret Key，从而保证安全性;
获取到 Secret Key 后，再使用对称密钥加密方式进行通信，从而保证效率。（下图中的 Session Key 就是 Secret Key）

认证：公开密钥获取
服务器的运营人员向 CA 提出公开密钥的申请，CA 在判明提出申请者的身份之后，会对已申请的公开密钥做数字签名，然后分配这个已签名的公开密钥，并将该公开密钥放入公开密钥证书后绑定在一起。

完整性保护
SSL 提供报文摘要功能来进行完整性保护。
HTTP 也提供了 MD5 报文摘要功能，但不是安全的。例如报文内容被篡改之后，同时重新计算 MD5 的值，通信接收方是无法意识到发生了篡改。
HTTPS 的报文摘要功能之所以安全，是因为它结合了加密和认证这两个操作。试想一下，加密之后的报文，遭到篡改之后，也很难重新计算报文摘要，因为无法轻易获取明文。

HTTPS 的缺点
因为需要进行加密解密等过程，因此速度会更慢；
需要支付证书授权的高额费用。

HTTP/1.x 实现简单是以牺牲性能为代价的：HTTP2.0可以解决这些问题
客户端需要使用多个连接才能实现并发和缩短延迟；
不会压缩请求和响应首部，从而导致不必要的网络流量；
不支持有效的资源优先级，致使底层 TCP 连接的利用率低下。

一般游戏中TCP和UDP会同时用的，如果对于数据传输速度要求非常高的场景，比如FPS，MOBA等游戏过程中，用户对战时候的数据肯定是要用UDP来传输的，并且在程序层面保证传输的可靠性，包括自己做校验等；
但其它模块，比如大厅里啊，买东西啊，创建房间啊等等，都是可以TCP实现的。
协议解决方案：kcp+fec，UDT，UDX
