一个进程在用户态需要使用内核态的功能，就进行系统调用从而陷入内核
Linux 的系统调用主要有以下这些：
进程控制	fork(); exit(); wait();
进程通信	pipe(); shmget(); mmap();
文件操作	open(); read(); write();
设备操作	ioctl(); read(); write();
信息维护	getpid(); alarm(); sleep();
安全	chmod(); umask(); chown();


进程管理：
通信方面进程和线程的区别：
线程间可以通过直接读写同一进程中的数据进行通信，但是进程通信需要借助 IPC。

进程间通信方式：
根据进程通信时信息量大小的不同,可以将进程通信划分为两大类型:
低级通信：控制信息的通信(主要用于进程之间的同步,互斥,终止和挂起等等控制信息的传递)
高级通信：大批数据信息的通信(主要用于进程间数据块数据的交换和共享,常见的高级通信有管道,消息队列,共享内存等)。

管道通信：
一个进程在管道的尾部写入数据，另一个进程从管道的头部读出数据。管道包括无名管道和有名管道两种，前者只能用于父进程和子进程间的通信，后者可用于运行于同一系统中的任意两个进程间的通信。

管道通信特点： 
1. 管道通讯是单向的，有固定的读端和写端。 
2. 数据被进程从管道读出后，在管道中该数据就不存在了。 
3. 当进程去读取空管道的时候，进程会阻塞。 
4. 当进程往满管道写入数据时，进程会阻塞。 
5. 管道容量为64KB（#define PIPE_BUFFERS 16 include/linux/pipe_fs_i.h）

无名管道（pipe）：
是 UNIX 系统IPC最古老的形式，是一种半双工的通信方式，数据只能单向流动，而且只能在具有亲缘关系的进程间使用。
在Linux系统中，无名管道一旦创建完成后，操作无名管道等同于操作文件。无名管道的读端被视作一个文件；无名管道的写端也被视作一个文件。因此可以使用read，write，close等文件操作函数来访问无名管道。
有名管道（FIFO）：
有名管道又称为FIFO文件（先进先出），因此我们对有名管道的操作也可以采用操作文件的方法，如使用open，read，write等。可用于运行于同一系统中的任意两个进程间的通信。
FIFO文件对比普通文件： 
FIFO文件在使用上和普通文件有相似之处，但是也有 不同之处： 
1. 读取Fifo文件的进程只能以”RDONLY”方式打开fifo文件。 
2. 写Fifo文件的进程只能以”WRONLY”方式打开fifo文件。 
3. Fifo文件里面的内容被读取后，就消失了。但是普通文件里面的内容读取后还存在。

消息队列：
消息队列克服了信号承载信息量少，管道只能承载无格式字节流以及缓冲区大小受限等缺点。
消息队列是面向记录的，其中的消息具有特定的格式以及特定的优先级。
消息队列独立于发送与接收进程。进程终止时，消息队列及其内容并不会被删除。
消息队列可以实现消息的随机查询,消息不一定要以先进先出的次序读取,也可以按消息的类型读取。







